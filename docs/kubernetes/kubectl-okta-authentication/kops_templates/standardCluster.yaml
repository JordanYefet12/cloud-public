#
# using kops cli 1.10.0
#
{{- $awsRegion := .awsRegion }}
{{- $kopsName := .kopsName }}
{{- $instanceGroups := .instanceGroups }}

apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{ .kopsName }}
spec:
  {{ if .enableadditionalPolicies -}}
  additionalPolicies:
    node: |
      {{ .additionalPolicies.node | indent 6 }}
  {{- end }}
  sshKeyName: {{ .sshKeyName }}
  networkID: {{ .vpc }}
  kubernetesApiAccess:
  {{- range $key, $value := .kubernetesApiAccess }}
  - "{{ $value }}"
  {{- end }}
  api:
    dns: {}
    loadBalancer:
      type: Internal
      idleTimeoutSeconds: 300
  {{ if .enableAwsAuthentication -}}
  authentication:
    aws: {}
  {{- end }}
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{ .s3BucketName }}/{{ .kopsName }}
  etcdClusters:
  # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#etcdclusters-v3--tls
  - enableEtcdTLS: true
    etcdMembers:
    {{- range $key, $value := .availabilityZonesEtcd }}
    - instanceGroup: master-{{ $awsRegion }}{{ $value }}
      name: {{ $value }}
    {{- end }}
    name: main
    version: {{ .etcd.version }}
  - enableEtcdTLS: true
    etcdMembers:
    {{- range $key, $value := .availabilityZonesEtcd }}
    - instanceGroup: master-{{ $awsRegion }}{{ $value }}
      name: {{ $value }}
    {{- end }}
    name: events
    version: {{ .etcd.version }}
  iam:
    # https://github.com/kubernetes/kops/blob/master/docs/iam_roles.md#iam-roles
    allowContainerRegistry: true
    legacy: false
  # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#kubeapiserver
  # kubeAPIServer:
  #   auditLogPath: /var/log/kube-apiserver-audit.log
  #   auditLogMaxAge: 10
  #   auditLogMaxBackups: 1
  #   auditLogMaxSize: 100
  #   auditPolicyFile: /srv/kubernetes/audit.yaml
    # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#runtimeconfig
    # runtimeConfig:
    #   batch/v2alpha1: "true"
    #   apps/v1alpha1: "true"
  # kubelet:
    # https://github.com/kubernetes/kops/blob/master/docs/cluster_spec.md#compute-resources-reservation
    # kubeReserved:
    #     cpu: "100m"
    #     memory: "100Mi"
    #     ephemeral-storage: "1Gi"
    # kubeReservedCgroup: "/kube-reserved"
    # systemReserved:
    #     cpu: "100m"
    #     memory: "100Mi"
    #     ephemeral-storage: "1Gi"
  kubernetesVersion: {{ .kubernetesVersion }}
  masterPublicName: k8s-api.{{ .kopsName }}
  networkCIDR: {{ .networkCIDR }}
  networking:
    canal: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  {{- range $key, $value := .kubernetesSSHAccess }}
  - "{{ $value }}"
  {{- end }}
  subnets:
  # utility subnets
  {{- range $key, $value := .networks.utility }}
  - name: {{ $value.name }}
    id: {{ $value.id }}
    type: {{ $value.type }}
    zone: {{ $value.zone }}
  {{- end }}

  # Kube masters subnets
  {{- range $key, $value := .networks.master }}
  - name: {{ $value.name }}
    id: {{ $value.id }}
    type: {{ $value.type }}
    zone: {{ $value.zone }}
    egress: {{ $value.egress }}
  {{- end }}

  # worker subnets
  {{- range $key, $value := .networks.worker }}
  - name: {{ $value.name }}
    id: {{ $value.id }}
    type: {{ $value.type }}
    zone: {{ $value.zone }}
    egress: {{ $value.egress }}
  {{- end }}

#   # utility subnets
#   {{- range $key, $value := .availabilityZonesAll }}
#   - cidr: {{ $networkPortion }}.{{ $key }}.0/24
#     name: {{ $awsRegion }}{{ $value }}-utility
#     type: Utility
#     zone: {{ $awsRegion }}{{ $value }}
#   {{- end }}
#
# {{- if .enablePublicSubnets -}}
#   {{- range $key, $value := .availabilityZonesAll }}
#   - cidr: {{ $networkPortion }}.1{{ $key }}.0/24
#     name: public-{{ $value }}
#     type: Public
#     zone: {{ $awsRegion }}{{ $value }}
#   {{- end }}
# {{- end }}
#
#   # Kube masters subnets
#   {{- range $key, $value := .availabilityZonesKubeMaster }}
#   - cidr: {{ $networkPortion }}.2{{ $key }}.0/24
#     name: kube-master-{{ $value }}
#     type: Private
#     zone: {{ $awsRegion }}{{ $value }}
#   {{- end }}
#
#   # infrastructure subnets
#   {{- range $key, $value := .availabilityZonesAll }}
#   - cidr: {{ $networkPortion }}.3{{ $key }}.0/24
#     name: infrastructure-zone-{{ $value }}
#     type: Private
#     zone: {{ $awsRegion }}{{ $value }}
#   {{- end }}
#
#   # worker subnets
#   {{- range $key, $value := .availabilityZonesAll }}
#   - cidr: {{ $networkPortion }}.4{{ $key }}.0/24
#     name: worker-zone-{{ $value }}
#     type: Private
#     zone: {{ $awsRegion }}{{ $value }}
#   {{- end }}

  topology:
    dns:
      type: Public
    masters: private
    nodes: private

#
# Kubernetes Masters
#
{{- range $key, $value := .availabilityZonesKubeMaster }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: master-{{ $awsRegion }}{{ $value }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.kubeMaster.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  # CoreOS: https://github.com/kubernetes/kops/blob/06b0111251ab87861e57dbf5f8d36f02e84af04d/docs/images.md#coreos
  image: {{ $instanceGroups.kubeMaster.image }}
  machineType: {{ $instanceGroups.kubeMaster.machineType }}
  maxSize: {{ $instanceGroups.kubeMaster.maxSize }}
  minSize: {{ $instanceGroups.kubeMaster.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{ $awsRegion }}{{ $value }}
    {{- range $key, $value := $instanceGroups.kubeMaster.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  role: Master
  subnets:
  - {{ $awsRegion }}{{ $value }}-master
{{- end }}

#
# infrastructure group
#
{{- if .enableInfrastructureGroup1 -}}
{{- range $key, $value := .availabilityZonesAll }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: infrastructure-zone-{{ $value }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.infrastructureGroup1.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  image: {{ $instanceGroups.infrastructureGroup1.image }}
  machineType: {{ $instanceGroups.infrastructureGroup1.machineType }}
  maxSize: {{ $instanceGroups.infrastructureGroup1.maxSize }}
  minSize: {{ $instanceGroups.infrastructureGroup1.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: infrastructure-zone-{{ $value }}
    {{- range $key, $value := $instanceGroups.infrastructureGroup1.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.infrastructureGroup1.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.infrastructureGroup1.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
 - {{ $awsRegion }}{{ $value }}-infrastructure
{{- end }}
{{- end }}

#
## Spot instances
#
{{- if .enableSpotInstanceGroup1 -}}
{{- range $key, $value := .availabilityZonesAll }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: spot-zone-{{ $value }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.spotGroup1.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  image: {{ $instanceGroups.spotGroup1.image }}
  machineType: {{ $instanceGroups.spotGroup1.machineType }}
  maxPrice: {{ $instanceGroups.spotGroup1.maxPrice }}
  maxSize: {{ $instanceGroups.spotGroup1.maxSize }}
  minSize: {{ $instanceGroups.spotGroup1.minSize }}
  nodeLabels:
    {{- range $key, $value := $instanceGroups.spotGroup1.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.spotGroup1.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.spotGroup1.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
  - {{ $awsRegion }}{{ $value }}-spot
{{- end }}
{{- end }}

#
# On workerGroup instances
#
{{ if .enableWorkerSubnets -}}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: worker
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.workerGroup.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  image: {{ $instanceGroups.workerGroup.image }}
  machineType: {{ $instanceGroups.workerGroup.machineType }}
  maxSize: {{ $instanceGroups.workerGroup.maxSize }}
  minSize: {{ $instanceGroups.workerGroup.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: worker
    {{- range $key, $value := $instanceGroups.workerGroup.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.workerGroup.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.workerGroup.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
{{- range $key, $value := .availabilityZonesAll }}
  - {{ $awsRegion }}{{ $value }}-worker
{{- end }}
{{- end }}


#
# Jenkins masters group
#
{{- if .enableJenkinsGroup1 -}}
{{- range $key, $value := .availabilityZonesAll }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: jenkins-master-zone-{{ $value }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.jenkinsMastersGroup1.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  image: {{ $instanceGroups.jenkinsMastersGroup1.image }}
  machineType: {{ $instanceGroups.jenkinsMastersGroup1.machineType }}
  maxSize: {{ $instanceGroups.jenkinsMastersGroup1.maxSize }}
  minSize: {{ $instanceGroups.jenkinsMastersGroup1.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: jenkins-master-zone-{{ $value }}
    {{- range $key, $value := $instanceGroups.jenkinsMastersGroup1.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.jenkinsMastersGroup1.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.jenkinsMastersGroup1.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
  - worker-zone-{{ $value }}
{{- end }}
{{- end }}

#
# Jenkins workers group
#
{{- if .enableJenkinsGroup1 -}}
{{- range $key, $value := .availabilityZonesAll }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ $kopsName }}
  name: jenkins-workers-zone-{{ $value }}
spec:
  cloudLabels:
    {{- range $key, $value := $instanceGroups.jenkinsWorkersGroup1.cloudLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  image: {{ $instanceGroups.jenkinsWorkersGroup1.image }}
  machineType: {{ $instanceGroups.jenkinsWorkersGroup1.machineType }}
  maxSize: {{ $instanceGroups.jenkinsWorkersGroup1.maxSize }}
  minSize: {{ $instanceGroups.jenkinsWorkersGroup1.minSize }}
  nodeLabels:
    kops.k8s.io/instancegroup: jenkins-worker-zone-{{ $value }}
    {{- range $key, $value := $instanceGroups.jenkinsWorkersGroup1.nodeLabels }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  {{ if $instanceGroups.jenkinsWorkersGroup1.taints.enable }}
  taints:
    {{- range $key, $value := $instanceGroups.jenkinsWorkersGroup1.taints.items }}
    - "{{ $value }}"
    {{- end }}
  {{- end }}
  role: Node
  subnets:
  - worker-zone-{{ $value }}
{{- end }}
{{- end }}
